getwd()
sourceCpp("testrows.cpp")
sourceCpp("test1.cpp")
sourceCpp("test1.cpp")
sourceCpp("testrows.cpp")
A = matrix(c(1:20), nrow = 5)
A
testrows(A, c(1,4))
cppSource("rcpp_beta.cpp")
RcppSource("rcpp_beta.cpp")
sourceCpp("rcpp_beta.cpp")
sourceCpp("rcpp_beta.cpp")
data("iris")
iris
A.1 = lm(Sepal.Length ~ Sepal.Width + Petal.Length)
A.1 = lm(Sepal.Length ~ Sepal.Width + Petal.Length, data = iris)
betaBoot(iris[,1], cbind(rep(1, 150),as.matrix(iris[,c(2,3)])))
betaBoot(iris[,1], cbind(rep(1, 150),as.matrix(iris[,c(2,3)])), 100)
A.2 = betaBoot(iris[,1], cbind(rep(1, 150),as.matrix(iris[,c(2,3)])), 100)
rowMeans(A,2)
rowMeans(A.2)
A.1$coefficients
A.2 = betaBoot(iris[,1], cbind(rep(1, 150),as.matrix(iris[,c(2,3)])), 10000)
rowMeans(A.2)
testro(A, c(1,4,4))
testrows(A, c(1,4,4))
library(microbenchmark)
reg.boot = function(y, x, nboot = 100, boot.type = "np", intercept = T){
if(length(names(Filter(is.factor, x))) == 0){warning("There are factors in your data! Please convert them to appropriate dummies before running this function!")}
var.names = colnames(x)
if(intercept == T){
x = cbind(rep(1, nrow(x)), x)
var.names = c("Intercept", var.names)
}
beta.boot = matrix(NA, ncol = nboot, nrow = ncol(x))
data = cbind(y,x)
data = as.matrix(data)
beta.true           = as.vector(solve(t(data[,-1])%*%data[,-1])%*%t(data[,-1])%*%data[,1])
names(beta.true)    = var.names
y.hat               = data[,-1]%*%beta.true
if(boot.type == "np"){
for(i in 1:nboot){ # nice, if X is random
index.boot    = sample(c(1:nrow(data)), size = nrow(data), replace = T)
data.boot     = data[index.boot, ]
y.boot        = data.boot[, 1]
x.boot        = data.boot[, -1]
beta.boot[,i] = solve(t(x.boot)%*%x.boot)%*%t(x.boot)%*%y.boot
}
}
if(boot.type == "wild"){ # if X is deterministic/fixed
resid.hat   = y - y.hat
for(i in 1:nboot){
w          = sample(c(-1,1), replace = T, size = length(y))
resid.boot = w * resid.hat#sample(resid.fit, size = length(y), replace = T)
y.boot     = y.hat + resid.boot
beta.boot[,i] = solve(t(data[,-1])%*%data[,-1])%*%t(data[,-1])%*%y.boot
}
}
beta                = rowMeans(beta.boot)
names(beta)         = var.names
beta.var            = (rowSums(beta.boot^2) - nboot * rowMeans(beta.boot)^2) / (nboot - 1)
beta.sd             = sqrt(beta.var)
names(beta.sd)      = var.names
conf.int            = apply(beta.boot, 1, quantile, probs = c(0.025, 0.975))
colnames(conf.int)  = var.names
return(list("true"  = beta.true, "estimate" = beta, "conf.int" = conf.int, "Std.D." = beta.sd))
}
x.test = cbind(rep(1,150), as.matrix(iris[,c(2,3)]))
head(x.test)
y.test = iris$Sepal.Length
microbenchmark(reg.boot(y.test, x.test, nboot = 1000, intercept = F),
betaBoot(y.test, x.test, 1000))
warnings()
str(x.test)
View(x.test)
View(x.test)
any(is.factor(x.test))
reg.boot = function(y, x, nboot = 100, boot.type = "np", intercept = T){
if(length(names(Filter(is.factor, x))) =! 0){warning("There are factors in your data! Please convert them to appropriate dummies before running this function!")}
var.names = colnames(x)
if(intercept == T){
x = cbind(rep(1, nrow(x)), x)
var.names = c("Intercept", var.names)
}
beta.boot = matrix(NA, ncol = nboot, nrow = ncol(x))
data = cbind(y,x)
data = as.matrix(data)
beta.true           = as.vector(solve(t(data[,-1])%*%data[,-1])%*%t(data[,-1])%*%data[,1])
names(beta.true)    = var.names
y.hat               = data[,-1]%*%beta.true
if(boot.type == "np"){
for(i in 1:nboot){ # nice, if X is random
index.boot    = sample(c(1:nrow(data)), size = nrow(data), replace = T)
data.boot     = data[index.boot, ]
y.boot        = data.boot[, 1]
x.boot        = data.boot[, -1]
beta.boot[,i] = solve(t(x.boot)%*%x.boot)%*%t(x.boot)%*%y.boot
}
}
if(boot.type == "wild"){ # if X is deterministic/fixed
resid.hat   = y - y.hat
for(i in 1:nboot){
w          = sample(c(-1,1), replace = T, size = length(y))
resid.boot = w * resid.hat#sample(resid.fit, size = length(y), replace = T)
y.boot     = y.hat + resid.boot
beta.boot[,i] = solve(t(data[,-1])%*%data[,-1])%*%t(data[,-1])%*%y.boot
}
}
beta                = rowMeans(beta.boot)
names(beta)         = var.names
beta.var            = (rowSums(beta.boot^2) - nboot * rowMeans(beta.boot)^2) / (nboot - 1)
beta.sd             = sqrt(beta.var)
names(beta.sd)      = var.names
conf.int            = apply(beta.boot, 1, quantile, probs = c(0.025, 0.975))
colnames(conf.int)  = var.names
return(list("true"  = beta.true, "estimate" = beta, "conf.int" = conf.int, "Std.D." = beta.sd))
}
microbenchmark(reg.boot(y.test, x.test, nboot = 1000, intercept = F),
betaBoot(y.test, x.test, 1000))
warnings()
reg.boot = function(y, x, nboot = 100, boot.type = "np", intercept = T){
if(length(names(Filter(is.factor, x))) != 0){warning("There are factors in your data! Please convert them to appropriate dummies before running this function!")}
var.names = colnames(x)
if(intercept == T){
x = cbind(rep(1, nrow(x)), x)
var.names = c("Intercept", var.names)
}
beta.boot = matrix(NA, ncol = nboot, nrow = ncol(x))
data = cbind(y,x)
data = as.matrix(data)
beta.true           = as.vector(solve(t(data[,-1])%*%data[,-1])%*%t(data[,-1])%*%data[,1])
names(beta.true)    = var.names
y.hat               = data[,-1]%*%beta.true
if(boot.type == "np"){
for(i in 1:nboot){ # nice, if X is random
index.boot    = sample(c(1:nrow(data)), size = nrow(data), replace = T)
data.boot     = data[index.boot, ]
y.boot        = data.boot[, 1]
x.boot        = data.boot[, -1]
beta.boot[,i] = solve(t(x.boot)%*%x.boot)%*%t(x.boot)%*%y.boot
}
}
if(boot.type == "wild"){ # if X is deterministic/fixed
resid.hat   = y - y.hat
for(i in 1:nboot){
w          = sample(c(-1,1), replace = T, size = length(y))
resid.boot = w * resid.hat#sample(resid.fit, size = length(y), replace = T)
y.boot     = y.hat + resid.boot
beta.boot[,i] = solve(t(data[,-1])%*%data[,-1])%*%t(data[,-1])%*%y.boot
}
}
beta                = rowMeans(beta.boot)
names(beta)         = var.names
beta.var            = (rowSums(beta.boot^2) - nboot * rowMeans(beta.boot)^2) / (nboot - 1)
beta.sd             = sqrt(beta.var)
names(beta.sd)      = var.names
conf.int            = apply(beta.boot, 1, quantile, probs = c(0.025, 0.975))
colnames(conf.int)  = var.names
return(list("true"  = beta.true, "estimate" = beta, "conf.int" = conf.int, "Std.D." = beta.sd))
}
microbenchmark(reg.boot(y.test, x.test, nboot = 1000, intercept = F),
betaBoot(y.test, x.test, 1000))
microbenchmark(reg.boot(y.test, x.test, nboot = 1000, intercept = F),
betaBoot(y.test, x.test, 1000))
microbenchmark(reg.boot(y.test, x.test, nboot = 10000, intercept = F),
betaBoot(y.test, x.test, 10000))
getwd()
setwd("..")
getwd()
dyn.load("test1.so")
x = c(1:10)
.Call("rowMin", x)
is.numeric(x)
.Call("rowMin", as.numeric(x))
cumsum()
cumsum(x)
x = sample(x)
x
.Call("rowMin", as.numeric(x))
A
dyn.load("test1.c")
getwd()
dyn.load("test1.so")
.Call(A, nrows(A), ncol(A))
.Call("rowLq", A, nrow(A), ncol(A))
.Call("rowLq", as.numeric(A), nrow(A), ncol(A))
A
as.numeric(A)
as.double(A)
as.matrix(as.numeric(A), ncol = 4)
matrix(as.numeric(A), ncol = 4)
.Call("rowLq", matrix(as.numeric(A), ncol = 4), nrow(A), ncol(A))
apply(A, 1, quantile, probs = 0.25)
as.numeric(A)
dyn.load("test1.so")
.Call("rowLq", matrix(as.numeric(A), ncol = 4), nrow(A), ncol(A))
for(i in 0:5){
for(j in 0:4){
print(i + 5 * j)
}
}
for(i in 0:4){
for(j in 0:3){
print(i + 5 * j)
}
}
dyn.load("test1.so")
.Call("rowLq", matrix(as.numeric(A), ncol = 4), nrow(A), ncol(A))
dyn.load("test1.so")
.Call("rowLq", matrix(as.numeric(A), ncol = 4), nrow(A), ncol(A))
?apply
apply(A, 1, quantile, probs = 0.25)
dyn.load("test1.so")
.Call("rowLq", matrix(as.numeric(A), ncol = 4), nrow(A), ncol(A))
dyn.load("test1.so")
.Call("rowLq", matrix(as.numeric(A), ncol = 4), nrow(A), ncol(A))
row.lq.c = function(x){
.Call("rowLq", matrix(as.numeric(x), ncol = ncol(x)), nrow(x), ncol(x))
}
row.lq.c(A)
sourceCpp("rowLq.cpp")
rowLq
View(rowLq)
rowLq(A, nrow(A), ncol(A))
A = matrix(rnorm(10000), nrow = 1000)
microbenchmark(apply(A, 1, quantile, probs = 0.25),
rowLq(A, nrow(A), ncol(A)),
row.lq.c(A))
A = matrix(c(1:20), nrow = 5)
A
dyn.load("test1.so")
row.lq.c = function(x, q){
.Call("rowLq", matrix(as.numeric(x), ncol = ncol(x)), nrow(x), ncol(x), q)
}
row.lq.c(A, 0.33)
apply(A, 1, quantile, probs = 0.33)
A = matrix(rnorm(1000), nrow = 100)
apply(A, 1, quantile, probs = 0.33)
q.1 = apply(A, 1, quantile, probs = 0.33)
q.2 row.lq.c(A, 0.33)
q.2 = row.lq.c(A, 0.33)
q.1 == q.2
all(q.1 == q.2)
sourceCpp("rowLq.cpp")
sourceCpp("rowLq.cpp")
A
A = matrix(c(1:20), nrow = 5)
apply(A, 1, quantile, probs = c(0.25, 0.75))
rowLq(A, nrow(A), ncol(A), c(0.25, 0.75))
qt.3rowLq(A, nrow(A), ncol(A), c(0.25, 0.75))
qt.3 = rowLq(A, nrow(A), ncol(A), c(0.25, 0.75))
colnames(qt.3) = as.character(c(0.25, 0.75))
qt.3
sourceCpp("rowLq.cpp")
apply(A, 2, quantiles, probs = c(0.25, 0.75))
apply(A, 2, quantile, probs = c(0.25, 0.75))
colUq(A, nrow(A), ncol(A), c(0.25, 0.75))
Rcpp.package.skeleton("nboot", attributes = T)
compileAttributes()
compileAttributes("./nboot")
rm(ls = list(all))
rm(ls(all))
rm(ls())
rm(list = ls())
compileAttributes("./nboot")
library(nboot)
install.packages("nboot")
setwd("..")
getwd()
setwd("./erin")
getwd()
Rcpp.package.skeleton("test_1", example_code = F, cpp_files = c("rowLq.cpp"))
compileAttributes()
compileAttributes("test_1")
getwd()
setwd("~/Dropbox/Studium/M.Sc. Statistics/Semester III/NIC/code")
getwd()
library(Rcpp)
sourceCpp("t_type.cpp")
sourceCpp("t_type.cpp")
x = rnorm(10)
b = tBootNp(x, 1000)
t.test(x)$statistic
tt = t.test(x)$statistic
qt = quantile(b, probs = c(0.025, 0.975))
t_test = function(x, nboot){
b = tBootNp(x, nboot)
t.true = t.test(x)$statistic
qt = quantile(b, probs = c(0.025, 0.975))
return(t.true < qt[1] || t.true > qt[2])
}
t_test(x, 1000)
replicate(1000, t_test(rnorm(10), 1000))
sum(replicate(1000, t_test(rnorm(10), 1000)))
mean(replicate(1000, t_test(rnorm(10), 1000)))
sourceCpp("t_type.cpp")
t_test = function(x, nboot){
b = tBootW(x, nboot)
t.true = t.test(x)$statistic
qt = quantile(b, probs = c(0.025, 0.975))
return(t.true < qt[1] || t.true > qt[2])
}
mean(replicate(1000, t_test(rnorm(10), 1000)))
sourceCpp("t_type.cpp")
sourceCpp("t_type.cpp")
t_test = function(x, nboot){
b = tBootW(x, nboot)
t.true = t.test(x)$statistic
qt = quantile(b, probs = c(0.025, 0.975))
return(t.true < qt[1] || t.true > qt[2])
}
mean(replicate(1000, t_test(rnorm(10), 1000)))
sourceCpp("t_type.cpp")
sourceCpp("t_type.cpp")
sourceCpp("t_type.cpp")
contributors
contributors()
seq_along(3)
seq_along(c(1:3))
seq_along(1,3)
?seq_along
getwd()
library(Rcpp)
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
a = rnorm(10)
summary(a)
summaryBoot(a, 100)
summary.boot.C(x, nboot = 100, boot.type = "np"){
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
results.summary[c(1,6)] = c(min(x), max(x))
switc(boot.type,
np = {
results.summary[c(2,3,4,5,7)] = summaryBoot(x, nboot)
},
wild = {
}
)
}
summary.boot.C(x, nboot = 100, boot.type = "np"){
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
results.summary[c(1,6)] = c(min(x), max(x))
switc(boot.type,
np = {
results.summary[c(2,3,4,5,7)] = summaryBoot(x, nboot)
},
wild = {
print("hi")
}
)
}
summary.boot.C(x, nboot = 100, boot.type = "np"){
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
results.summary[c(1,6)] = c(min(x), max(x))
switch(boot.type,
np = {
results.summary[c(2,3,4,5,7)] = summaryBoot(x, nboot)
},
wild = {
print("hi")
}
)
}
summary.boot.c(x, nboot = 100, boot.type = "np"){
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
results.summary[c(1,6)] = c(min(x), max(x))
switch(boot.type,
np = {
results.summary[c(2,3,4,5,7)] = summaryBoot(x, nboot)
},
wild = {
print("hi")
}
)
results.summary = round(results.summary, 4)
return(results.summary)
}
summary.boot.c = function(x, nboot = 100, boot.type = "np"){
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
results.summary[c(1,6)] = c(min(x), max(x))
switch(boot.type,
np = {
results.summary[c(2,3,4,5,7)] = summaryBoot(x, nboot)
},
wild = {
print("hi")
}
)
results.summary = round(results.summary, 4)
return(results.summary)
}
a
summary.boot.c(a)
summary.boot(a)
summary.boot = function(x, nboot = 100, boot.type = "np"){
n = length(x)
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
switch(boot.type,
np = {
x.boot  = matrix(sample(x, size = n*nboot, replace = T), ncol = nboot)
x.quant = apply(x.boot, 2, quantile, probs = c(0.25, 0.5, 0.75))
x.mean  = colMeans(x.boot)
x.var   = (colSums(x.boot^2) - n*x.mean^2)/(n-1)
results.summary[c(2,3,5)] = rowMeans(x.quant)
results.summary[4]        = mean(x.mean)
results.summary[7]        = sqrt(mean(x.var))
results.summary[c(1,6)]   = c(min(x), max(x))
},
wild = {
z       = x - mean(x)
w.boot  = matrix(sample(c(-1,1), size = n*nboot, replace = T), ncol = nboot)
x.boot  = z * w
x.quant = apply(x.boot, 2, quantile, probs = c(0.25, 0.5, 0.75))
x.mean  = colMeans(x.boot)
x.var   = (colSums(x.boot^2) - n*x.mean^2)/(n-1)
results.summary[c(2,3,5)] = rowMeans(x.quant)
results.summary[4]        = mean(x.mean)
results.summary[7]        = sqrt(mean(x.var))
results.summary[c(1,6)]   = c(min(x), max(x))
}
)
results.summary = round(results.summary, 4)
return(results.summary)
}
summary.boot.c(a)
summary.boot(a)
summary.boot(a, nboot = 1000)
summary.boot.c(a, nboot = 1000)
median(a)
sd(a)
mean(a)
summary(a)
sourceCpp("summary_cpp.cpp")
# # # # # # SUMMARY STATISTICS # # # # # #
summary.boot = function(x, nboot = 100, boot.type = "np"){
n = length(x)
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
switch(boot.type,
np = {
x.boot  = matrix(sample(x, size = n*nboot, replace = T), ncol = nboot)
x.quant = apply(x.boot, 2, quantile, probs = c(0.25, 0.5, 0.75))
x.mean  = colMeans(x.boot)
x.var   = (colSums(x.boot^2) - n*x.mean^2)/(n-1)
results.summary[c(2,3,5)] = rowMeans(x.quant)
results.summary[4]        = mean(x.mean)
results.summary[7]        = sqrt(mean(x.var))
results.summary[c(1,6)]   = c(min(x), max(x))
},
wild = {
z       = x - mean(x)
w.boot  = matrix(sample(c(-1,1), size = n*nboot, replace = T), ncol = nboot)
x.boot  = z * w
x.quant = apply(x.boot, 2, quantile, probs = c(0.25, 0.5, 0.75))
x.mean  = colMeans(x.boot)
x.var   = (colSums(x.boot^2) - n*x.mean^2)/(n-1)
results.summary[c(2,3,5)] = rowMeans(x.quant)
results.summary[4]        = mean(x.mean)
results.summary[7]        = sqrt(mean(x.var))
results.summary[c(1,6)]   = c(min(x), max(x))
}
)
results.summary = round(results.summary, 4)
return(results.summary)
}
summary.boot.c = function(x, nboot = 100, boot.type = "np"){
results.summary = numeric(7) # min, l-quartile, median, mean, u-quartile, max, sd
names(results.summary) = c("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max", "Std.Dev.")
results.summary[c(1,6)] = c(min(x), max(x))
switch(boot.type,
np = {
results.summary[c(2,3,4,5,7)] = summaryBoot(x, nboot)
},
wild = {
print("hi")
}
)
results.summary = round(results.summary, 4)
return(results.summary)
}
a = rnorm(100)
summary.boot(a)
summary.boot.c(a)
sourceCpp("summary_cpp.cpp")
summary.boot.c(a)
sd(a)
getwd()
library(Rcpp)
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
sourceCpp("summary_cpp.cpp")
x = rnorm(10)
summary(x)
sd(x)
summaryBoot(x, 1000)
summaryBoot(x, 10000)
quantile(x, probs = c(0.25, 0.5, 0.75))
x = rnorm(1000)
summary(x)
sd(x)
summaryBoot(x, 1000)
