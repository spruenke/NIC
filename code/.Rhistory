}
game.save = function(field_mat, moves_played, check_win){
file_name = paste0("4connect_", format(Sys.time(), format = "%Y_%m_%d_%H_%M_%S"), ".RData")
save(file = file_name, list = c(field_mat, moves_played, check_win))
cols_team = c("black", "firebrick")
png(filename = paste0(file_name, ".png"), width = 1280, height = 720)
board.new()
for(i in 1:nrow(field_mat)){
for(j in 1:ncol(field_mat)){
token.add(i, j, field_mat[i, j])
}
}
points(check_win$coords - 0.5, pch = 4, col = "darkgreen", cex = 3.5)
dev.off()
}
token.win = function(check_win, field_mat){
n_row_c = nrow(field_mat)
x_coord = check_win$coords[,1] - 0.5
y_coord = check_win$coords[,2] - 0.5
points(x = x_coord, y = y_coord, pch = 4, col = "darkgreen", cex = 3.5, lwd = 2)
}
computer.play = function(field_mat, column_counts){
play_col = 0
win_play = computer.play.win(field_mat, column_counts, play_col)
if(win_play > 0){
play_col = win_play
} else {
play_col = computer.play.lose(field_mat, column_counts, play_col)
}
# for each column where a disc can be dropped check whether computer can win or player 1 could win;
# otherwise choose randomly
if(play_col == 0){
sample_cols = which(column_counts < nrow(field_mat))
play_col = sample(sample_cols, size = 1)
}
return(play_col)
}
computer.play.win = function(field_mat, column_counts, play_col){
play_col = play_col
for(k in 1:length(column_counts)){
column_check = column_counts # The copied data has to be in loop in order to erase thew new added stuff again; otherwise the computer
field_check  = field_mat     # could detect a win where no one is
if(column_check[k] < nrow(field_check)){
column_check[k] = column_check[k] + 1
field_check[nrow(field_check) + 1 - column_check[k], k] = 2
check_play = check.win(field_check, column_check)
if(check_play$check == T){
play_col = k
break()
}
} else next()
}
return(play_col)
}
computer.play.lose = function(field_mat, column_counts, play_col){
play_col = play_col
for(k in 1:length(column_counts)){
column_check = column_counts # The copied data has to be in loop in order to erase thew new added stuff again; otherwise the computer
field_check  = field_mat     # could detect a win where no one is
if(column_check[k] < nrow(field_check)){
column_check[k]   = column_check[k] + 1
field_check[nrow(field_check) + 1 - column_check[k], k] = 1
check_play = check.win(field_check, column_check)
if(check_play$check == T){
play_col = k
break()
}
} else next()
}
return(play_col)
}
diag.low = function(mat){
n = nrow(mat)
k = ncol(mat)
if(k != n) stop("Matrix must be square")
diag = numeric(n)
seq_d  = seq(n, 1, -1)
for(i in 1:n){
diag[i] = mat[seq_d[i], i]
}
return(diag)
}
check.win = function(field_mat, column_counts){
n_row_c = nrow(field_mat)
win = F
return_list = list()
cum_counts = cumsum(column_counts)
cum_check = cum_counts - c(0,0,0,0, cum_counts[-c((length(column_counts) - 3):length(column_counts))])
# diagonal
r_max = max(column_counts)
# check left diag (left top to bottom right)
if(r_max >= 4){
stop_loop = F
for(j in 4:r_max){
for(z in 1:(ncol(field_mat) - 3)){
diag_check = diag(field_mat[n_row_c + c(1:4) - j, c(z:(z+3))])
if(any(diag_check == 0)) next()
if(length(unique(diag_check)) == 1){
win = T
return_list$type = "diagonal"
return_list$coords = data.frame(x = c(z:(z+3)), y = seq(j, (j-3), -1))
stop_loop = T
break()
}
}
if(stop_loop == T) break()
}
}
# check right diag (left bottom to top right)
if(r_max >= 4){
stop_loop = F
for(j in 4:r_max){
for(z in 1:(ncol(field_mat) - 3)){
diag_check = diag.low(field_mat[n_row_c + c(1:4) - j, c(z:(z+3))])
if(any(diag_check == 0)) next()
if(length(unique(diag_check)) == 1){
win = T
return_list$type = "diagonal"
return_list$coords = data.frame(x = c(z:(z+3)), y = c((j-3):j))
stop_loop = T
break()
}
}
if(stop_loop == T) break()
}
}
# rows
row_check = apply(field_mat, 1, function(x) length(x[x!=0]))
if(any(row_check >= 4)){
row_id = which(row_check >= 4)
if(length(row_id) > 1){
row_check_fin = apply(field_mat[row_id,], 1, function(x){
l = NA
for(j in 4:ncol(field_mat)){
if(any(x[c((j-3):j)] == 0)){
next()
} else if(length(unique(x[c((j-3):j)])) == 1){
l = j
}
}
return(l)
}
)
row_win = which(!is.na(row_check_fin))
} else {
row_check_fin = NA
x = field_mat[row_id,]
for(j in 4:length(x)){
if(any(x[c((j-3):j)] == 0)){
next()
} else if(length(unique(x[c((j-3):j)])) == 1){
row_check_fin = j
}
}
row_win = row_id
}
if(any(!is.na(row_check_fin))){
cols = row_check_fin[!is.na(row_check_fin)]
win = T
return_list$type = "row"
return_list$coords = data.frame(x = c((cols-3):cols), y = row_win)
}
}
# columns
if(any(column_counts >= 4)){
id_col = which(column_counts >= 4)
for(j in 1:length(id_col)){
cols = field_mat[n_row_c + c(1:4) - column_counts[id_col[j]] , id_col[j]]
if(length(unique(cols)) == 1){
win = T
return_list$type = "column"
return_list$coords = data.frame(x = id_col[j], y = column_counts[id_col[j]] - c(0:3))
break()
}
}
}
return_list$check = win
return(return_list)
}
board.new = function(n_row, n_col){
plot(0, type = "n", ylim = c(0, n_row), xlim = c(0, n_col), xaxt = "n", yaxt = "n", main = "", ylab = "", xlab = "", xaxs = "i", yaxs = "i")
axis(3, at = seq(0.5, n_col - 0.5, 1), c(1:7), tick = F)
axis(2, at = seq(0.5, n_row - 0.5, 1), c(1:6), tick = F)
title("Connect Four", line = 2.5, font.main = 1)
grid(n_col, n_row, col = "darkgrey")
}
token.add = function(row, col, team, size = 3.5){
color = c("black", "firebrick")[team]
points(col - 0.5, row - 0.5, pch = 19, col = color, cex = size)
}
board.4c = function(n_row, n_col){
b.1 = as.matrix(expand.grid(2, c(1:3)))
b.2 = as.matrix(expand.grid(c(1,6,7), c(1:6)))
b.3 = as.matrix(expand.grid(c(3,4), c(1,2,3,5,6)))
black = cbind(rbind(b.1, b.2, b.3), rep(1, (nrow(b.1) + nrow(b.2) + nrow(b.3))))
r.1 = as.matrix(expand.grid(5, c(1:n_row)))
r.2 = matrix(c(2,2,2,3,4,6,5,4,4,4), ncol = 2)
red = cbind(rbind(r.1, r.2), rep(2, (nrow(r.1) + nrow(r.2))))
coords = rbind(black, red)
ord = sample(c(1:(n_row * n_col)))
board.new(n_row, n_col)
for(i in ord){
token.add(coords[i,2], coords[i,1], coords[i,3], size = 2)
Sys.sleep(0.05)
}
}
rules.print = function(){
cat("These are the rules: \n
* Each move, the current player has to drop her disc into a column of choice \n
* The disc falls straight down on top of the highest disc in that column \n
* If the column is full, no disc can be dropped there \n
* The objective is to form a horizontal, vertical or diagonal line of four of the own discs \n
* If there is no free cell and no line of four of one's disc, the game ends in a tie \n
")
}
game.initialize = function(n_row, n_col, n_player){
cat("Hi there! My name is Commander Data! \n What's up? \n I heard you want to play my brandnew game")
for(i in 1:5){
cat("... \n")
Sys.sleep(0.5)
}
cat(
"4 - CONNECT"
)
board.4c(n_row, n_col)
for(i in 1:5){
cat("... \n")
Sys.sleep(0.5)
}
cat("So, you know my name. I'd like to know yours, too. But first:\n
You can play against a friend or against me. What do you choose?\n
Ah, I see! You already chose!\n")
if(n_player == 1){
cat("Please, tell me your name. You can communicate with me via the console!\n")
player_name_1 = scan(what = "character", nlines = 1, quiet = T)
cat(paste0("Welcome to the game, ", player_name_1, "!\n"))
cat("I'll enjoy playing with you!\n")
player_name_2 = "Commander Data"
} else if(n_player == 2){
cat("I'm glad that I can watch you two play. Please, tell me your names. You can communicate with me via the console! \n
Player 1:\n")
player_name_1 = scan(what = "character", nlines = 1, quiet = T)
cat(paste0("Welcome to the game, ", player_name_1,"!\n"))
cat("Player 2:\n")
player_name_2 = scan(what = "character", nlines = 1, quiet = T)
cat(paste0("You're welcome, too, ", player_name_2, "!\n"))
}
cat("So, let's start the game!\n" )
rules.hear = "a"
while(!rules.hear %in% c("yes", "start")){
cat("If you want to hear the rules again, type >>yes<<, if you want to start immediately, type >>start<<!\n")
rules.hear = scan(what = "character", nlines = 1, quiet = T)
if(length(rules.hear) == 0){
cat("Error. Unfortunately, I could not understand what you said.\n")
} else if(rules.hear == "yes"){
game_start = character(0)
rules.print()
while(length(game_start)==0){
cat("To start type anything (no space) into the console and press enter whenever you are ready to rumble!")
game_start = scan(what = "character", nlines = 1, quiet = T)
}
board.new(n_row, n_col)
} else if(rules.hear == "start"){
board.new(n_row, n_col)
} else {
cat("Error. Unfortunately, I could not understand what you said.\n")
}
}
player.order = sample(c(1,2))
start_move <- player.order[1]
player_names <<- c(player_name_1, player_name_2)
match_status <<- 1
cat(paste0(player_name_1, " VS. ", player_name_2, "\n"))
cat(paste0("Player ", start_move, " (", player_names[start_move], ") starts! \n In each move you have to choose one column!\n"))
moves_played <<- matrix(NA, ncol = 2, nrow = n_row*n_col)
colnames(moves_played) = player_names[player.order]
column_counts <<- rep(0, n_col)
field_mat <<- matrix(0, ncol = n_col, nrow = n_row)
move_seq <<-  rep(player.order, (n_col * n_row) / 2)
#if(start_move == 2) move_seq <<- (move_seq %% 2) + 1
}
connect_four(n_player = 1)
install.packages("rpact")
library(rpact)
help(rpact)
design = getDesignGroupSequential()
design
getDesignCharacteristics(design)
?getDesignGroupSequential
getSampleSizeMeans(design)
?getSampleSizeMeans
?getDesignGroupSequential
design = getDesignGroupSequential(kMax = 2, typeOfDesign = "OF", informationRates = 0.5)
design = getDesignGroupSequential(kMax = 1, typeOfDesign = "OF", informationRates = 0.5)
design
design = getDesignGroupSequential(kMax = 2, typeOfDesign = "OF")
design
getDesignCharacteristics(design)
getSampleSizeMeans(design)
design = getDesignGroupSequential(kMax = 2, typeOfDesign = "OF")
design
getDesignCharacteristics(design)
getSampleSizeMeans(design, thetaH0 = 8, stDev = 18)
getSampleSizeMeans(design, thetaH0 = 8, stDev = 18, alternative = seq(8, 16, 1))
getSampleSizeMeans(design, thetaH0 = 8, stDev = 18, alternative = seq(9, 16, 1))
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
na.omit(DF)
prec.r = paste0(c("MSE", "MAE"), rep(c("np_", "w_"), each = 5), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd"))
prec.r
prec.r = paste0(c("MSE_", "MAE_"), rep(c("np_", "w_"), each = 5), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd"))
prec.r
prec.r = paste0(c("MSE_", "MAE_"), rep(paste0((c("np_", "w_"), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd"))), each = 5))
prec.r = paste0(c("MSE_", "MAE_"), rep(paste0(c("np_", "w_"), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd")), each = 5))
prec.r
prec.r = paste0(rep(c("MSE_", "MAE_"), each = 5), rep(paste0(c("np_", "w_"), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd")), each = 5))
prec.r
prec.r = paste0(rep(c("MSE_", "MAE_"), each = 5), paste0(c("np_", "w_"), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd")))
prec.r
paste0(c("np_", "w_"), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd"))
paste0(rep(c("np_", "w_"), each = 5), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd"))
prec.r = paste0(rep(c("MSE_", "MAE_"), each = 5), paste0(rep(c("np_", "w_"), each = 5), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd")))
prec.r
prec.r = paste0(rep(c("MSE_", "MAE_"), each = 10), paste0(rep(c("np_", "w_"), each = 5), c("0.25 Q", "0.5 Q", "Mean", "0.75 Q", "Sd")))
prec.r
A = data.frame(y = rnorm(10))
A
B = data.frame(c("A", "B") = NA)
B = cbind(A, matrix(NA, ncol = 2, nrow = nrow(A)))
B
library(microbenchmark)
a = microbenchmark(mean(rnorm(10)))
a
a
print(a)
a$time
mean(a$time)
summary(a$time/1000)
a$expr
nboots = c(10, 100, 500, 1000, 10000) # define different bootstrap iterations
n      = c(5, 10, 15, 20, 50, 100, 200) # define different sample sizes
nboots = c(10, 100, 500, 1000, 10000) # define different bootstrap iterations
n      = c(5, 10, 50, 100, 200) # define different sample sizes
library(gridExtra)
p1 = qplot(rexp(10), rnorm(10))
library(ggplot2)
p1 = qplot(rexp(10), rnorm(10))
p2 = qplot(rf(10, 1, 2), rnorm(10))
p2
p1
l = list(p1, p2)
grid.arrange(l, nrow = 1)
do.call("grid.arrange", l)
do.call("grid.arrange", l, nrow = 1)
do.call("grid.arrange", c(l, nrow = 1))
p3 = qplot(rt(10,2), rnorm(10))
p4 = qplot(runif(10), rnorm(10))
l = list(p1,p2,p3,p4)
do.call("grid.arrange", c(l, nrow = 2))
nboots = c(10, 100, 500, 1000, 10000) # define different bootstrap iterations
n      = c(5, 10, 50, 100, 200) # define different sample sizes
dat.R  = expand.grid(nboots, n)
colnames(dat.R) = c("nboots", "n")
dat.R
ggplot(mapping = aes(x = rnorm(10), y = rt(10, 2))) + geom_point()
ggplot(mapping = aes(x = rnorm(10), y = rt(10, 2))) + geom_point()
1
6
seq(1, nrow(dat.R), 5))
seq(1, nrow(dat.R), 5)
for(i in seq(1, nrow(dat.R), 5)){
print(i * (1:5))
#l.p[[i]] = ggplot(mapping = aes(x = dat.R[i * (1:5), "MSE_np_Mean"]))
}
for(i in seq(1, nrow(dat.R), 5)){
print(i + (0:4))
#l.p[[i]] = ggplot(mapping = aes(x = dat.R[i * (1:5), "MSE_np_Mean"]))
}
library(plotly)
install.packages("plotly")
library(plotly)
temp <- rnorm(100, mean=30, sd=5)
pressure <- rnorm(100)
dtime <- 1:100
plot_ly(x=temp, y=pressure, z=dtime, type="scatter3d", mode="markers", color=temp)
getwd()
png(file = "test1.png")
plot_ly(x=temp, y=pressure, z=dtime, type="scatter3d", mode="markers", color=temp)
dev.off()
p.test = plot_ly(x=temp, y=pressure, z=dtime, type="scatter3d", mode="markers", color=temp)
export(p.test)
ggplot()
?save
mae.fun = function(x, value){
return(mean(abs(x - value)))
}
a = rnorm(10)
mae.fun(a, 0)
mae.fun(a, c(1:10))
abs(a - c(1:10))
abs(a - 0)
a = matrix(rnorm(30), ncol = 6)
mae.fun(a, c(1:10))
mae.fun(a, c(1:5))
A = matrix(c(1:20), ncol = 5)
A
A - 1
mae.fun.comp = function(x, values){
return(mean(rowMeans(abs(x -  values))))
}
mse.fun.comp = function(x, values){
return(mean(rowMeans((x -  values)^2)))
}
# True values Normal
q.025 = qnorm(0.25)
f_test = function(x){
(x-2) / (4 * exp(-2*x))
}
curve(f_test, -5, 10)
f_test(0)
curve(f_test, -1, 1)
f_test(1)
f_test(2)
curve(f_test, 0, 1)
curve(f_test, 0, 2)
f_test(1.5)
A.temp.r.np
t.test(rnorm(10))$reject
a = t.test(rnorm(10))
n      = c(5, 10, 50, 100, 200) # define different sample sizes
t.power.fun = function(x, alpha = 0.05){
return(x < 0.05)
}
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.5, 1))$p.value)))
i = 1
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.5, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.5, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.5, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.5, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.5, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.5, 1))$p.value)))
?t.test
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 0.75, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 1, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 1, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 1.25, 1))$p.value)))
mean(t.power.fun(replicate(1000, t.test(rnorm(n[i], 1.5, 1))$p.value)))
A = data.frame("a" = rnorm(10), "b" = rexp(10, 1), "d" = c(1:10))
ggplot(data = A) + geom_line(mapping = aes(x = d, y = a)) + geom_line(mapping = aes(x = d, y = b))
library(ggplot2)
ggplot(data = A) + geom_line(mapping = aes(x = d, y = a)) + geom_line(mapping = aes(x = d, y = b))
B = data.frame("d" = c(1:10), "e" = rep(3, 10))
ggplot(data = A) + geom_line(mapping = aes(x = d, y = a)) + geom_line(mapping = aes(x = d, y = b)) + geom_line(mapping = aes(x = B$d, y = B$e))
qt(0.005, df = 24)
qnorm(0.005)
ab = qt(0.005, df = 24)
5 - ab * 2/5
ab = qt(0.995, df = 24)
ab
5 - ab * 2/5
setwd("D:/Dropbox/Studium/M.Sc. Statistics/Semester III/NIC/code")
pkgs = c("Rcpp", "RcppArmadillo", "microbenchmark", "ggplot2", "gridExtra", "xtable")
if(pkgs %in% installed.packages() == F) install.packages(pkgs = pkgs, dependencies = T)
lapply(as.list(pkgs), library, quietly = T, character.only = T)
nboots = c(10, 100, 500, 1000, 10000) # define different bootstrap iterations
n      = c(5, 10, 50, 100, 200) # define different sample sizes
base_grid  = expand.grid(nboots, n)
colnames(base_grid) = c("nboots", "n")
load("./results/summary_data.RData")
View(dat.R)
colnames(dat.R)[12]
colnames(dat.R)[13]
c(1,2,13:25)
xtable(t(dat.R[,c(1:12)]))
summary_xtable_R_MSE = xtable(t(dat.R[,c(1:12)]))
summary_xtable_R_MAE = xtable(t(dat.R[,c(1,2,13:25)]))
summary_xtable_Cpp_MSE = xtable(t(dat.Cpp[,c(1:12)]))
summary_xtable_Cpp_MAE = xtable(t(dat.Cpp[,c(1,2,13:25)]))
dat.R[,c(1:12)]
dat.R[,c(1,2,13:25)]
dat.R[,c(1,2,13:22)]
summary_xtable_R_MSE = xtable(t(dat.R[,c(1:12)]))
summary_xtable_R_MAE = xtable(t(dat.R[,c(1,2,13:22)]))
summary_xtable_Cpp_MSE = xtable(t(dat.Cpp[,c(1:12)]))
summary_xtable_Cpp_MAE = xtable(t(dat.Cpp[,c(1,2,13:22)]))
print(summary_xtable_R_MSE, file = "./results/tab_summary_r_mse.tex")
print(summary_xtable_R_MAE, file = "./results/tab_summary_r_mae.tex")
print(summary_xtable_Cpp_MSE, file = "./results/tab_summary_cpp_mse.tex")
print(summary_xtable_Cpp_MAE, file = "./results/tab_summary_cpp_mae.tex")
summary_xtable_R_MSE = xtable(dat.R[,c(1:12)])
summary_xtable_R_MAE = xtable(dat.R[,c(1,2,13:22)])
summary_xtable_Cpp_MSE = xtable(dat.Cpp[,c(1:12)])
summary_xtable_Cpp_MAE = xtable(dat.Cpp[,c(1,2,13:22)])
print(summary_xtable_R_MSE, file = "./results/tab_summary_r_mse.tex")
print(summary_xtable_R_MAE, file = "./results/tab_summary_r_mae.tex")
print(summary_xtable_Cpp_MSE, file = "./results/tab_summary_cpp_mse.tex")
print(summary_xtable_Cpp_MAE, file = "./results/tab_summary_cpp_mae.tex")
?xtable
xtable(dat.R[,c(1:12)], digits = c(0, 0, 0, rep(2, 10)))
summary_xtable_R_MSE = xtable(dat.R[,c(1:12)], digits = c(0, 0, 0, rep(2, 10)))
summary_xtable_R_MAE = xtable(dat.R[,c(1,2,13:22)], digits = c(0, 0, 0, rep(2, 10)))
summary_xtable_Cpp_MSE = xtable(dat.Cpp[,c(1:12)], digits = c(0, 0, 0, rep(2, 10)))
summary_xtable_Cpp_MAE = xtable(dat.Cpp[,c(1,2,13:22)], digits = c(0, 0, 0, rep(2, 10)))
print(summary_xtable_R_MSE, file = "./results/tab_summary_r_mse.tex", include.rownames = F)
print(summary_xtable_R_MAE, file = "./results/tab_summary_r_mae.tex", include.rownames = F)
print(summary_xtable_Cpp_MSE, file = "./results/tab_summary_cpp_mse.tex", include.rownames = F)
print(summary_xtable_Cpp_MAE, file = "./results/tab_summary_cpp_mae.tex", include.rownames = F)
load("./results/reg_data.RDa")
load("./results/reg_data.RData")
reg_time_xtab_R = xtable(time.r, digits = c(0,0,0, rep(2, 6)))
reg_time_xtab_C = xtable(time.c, digits = c(0,0,0, rep(2, 6)))
print(reg_time_xtab_R, file = "./results/tab_regTime_r.tex", include.rownames = F)
print(reg_time_xtab_C, file = "./results/tab_regTime_Cpp.tex", include.rownames = F)
