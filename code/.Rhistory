time.r = cbind(base_grid, time.r)
time.c = cbind(base_grid, time.c)
for(i in 1:nrow(dat.R)){
A.temp.r.np[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.r.w[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.c.w[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
x.sample = rchisq(n = dat.R$n[i], df = 2)
time.r[i,] = summary(microbenchmark(t.testBoot(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000) # microseconds
time.c[i,] = summary(microbenchmark(t.testBoot.cpp(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000)
}
source("t_test.R") # Bootstrap t-Test
A.temp.r.np = A.temp.r.w = A.temp.c.np = A.temp.c.w = matrix(NA, nrow = 4, ncol = 1000) # X from: Normal, Poisson, Exponential, ChiSquare
time.r = cbind(base_grid, time.r)
time.c = cbind(base_grid, time.c)
for(i in 1:nrow(dat.R)){
A.temp.r.np[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.r.w[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.c.w[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
x.sample = rchisq(n = dat.R$n[i], df = 2)
time.r[i,] = summary(microbenchmark(t.testBoot(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000) # microseconds
time.c[i,] = summary(microbenchmark(t.testBoot.cpp(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000)
}
source("t_test.R") # Bootstrap t-Test
A.temp.r.np = A.temp.r.w = A.temp.c.np = A.temp.c.w = matrix(NA, nrow = 4, ncol = 1000) # X from: Normal, Poisson, Exponential, ChiSquare
time.r = cbind(base_grid, time.r)
time.c = cbind(base_grid, time.c)
for(i in 1:nrow(dat.R)){
A.temp.r.np[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.r.w[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.c.w[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
x.sample = rchisq(n = dat.R$n[i], df = 2)
time.r[i,] = summary(microbenchmark(t.testBoot(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000) # microseconds
time.c[i,] = summary(microbenchmark(t.testBoot.cpp(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000)
}
n = 5
mu.0 = 5
nboot = 10
x = rpois(n, mu.0)
T.x    <- numeric(nboot)
n      <- length(x)
t.true <- (mean(x) - mu.0) / sqrt(var(x)) * sqrt(n)
x.boot <- matrix(sample(x, size = n*nboot, replace = T), ncol = nboot)
x.mean <- colMeans(x.boot)
x.var  <- (colSums(x.boot^2) - n*x.mean^2)/(n-1)
T.x    <- sqrt(n) * (x.mean - mean(x)) / sqrt(x.var)
quantile(T.x, probs = c(alpha/2, alpha, 1-alpha, 1-alpha/2))
alpha = 0.05
quantile(T.x, probs = c(alpha/2, alpha, 1-alpha, 1-alpha/2))
T.x
t.testBoot <- function(x, y = NULL, mu.0 = 0, alpha = 0.05, alternative = "two.sided", nboot = 100, boot.type = "np"){
if(is.null(y)){
T.x    <- numeric(nboot)
n      <- length(x)
t.true <- (mean(x) - mu.0) / sqrt(var(x)) * sqrt(n)
switch(boot.type, # switch between nonparametric and wild bootstrap
np = {
x.boot <- matrix(sample(x, size = n*nboot, replace = T), ncol = nboot)
x.mean <- colMeans(x.boot)
x.var  <- (colSums(x.boot^2) - n*x.mean^2)/(n-1)
T.x    <- sqrt(n) * (x.mean - mean(x)) / sqrt(x.var)
est    <- "Nonparametric Bootstrap"
},
wild = {
z      <- x - mean(x)
w.boot <- matrix(sample(c(-1,1), size = n*nboot, replace = T), ncol = nboot) # Rademacher Weights
x.boot <- w.boot * z
x.mean <- colMeans(x.boot)
x.var  <- (colSums(x.boot^2) - n*x.mean^2)/(n-1)
T.x    <- sqrt(n) * x.mean / sqrt(x.var)
est    <- "Wild Bootstrap"
}
)
crit   <- quantile(T.x, probs = c(alpha/2, alpha, 1-alpha, 1-alpha/2)) # compute critical values for one- and twosided
switch(alternative, # switch between alternative hypotheses and choose whether to reject or not reject
two.sided = {
ret    <- (t.true < crit[1] || t.true > crit[4])
},
greater   = {
ret  <- t.true > crit[3]
},
less      = {
ret  <- t.true < crit[2]
})
# compute p-value
p.v  <- mean(T.x > t.true)
p.v  <- min(2 * p.v, 2 - 2 * p.v)
# Prepare Results #######################################
# names(mu.0)     <- "mean"
# pop.var         <- mean(x.mean)
# names(pop.var)  <- "Mean"
# pop.stat        <- t.true
# names(pop.stat) <- "t"
# pop.par         <- length(x) - 1
# names(pop.par)  <- "df"
# conf.int        <- quantile(x.mean, probs = c(alpha/2, 1-alpha/2))
# attr(conf.int, "conf.level") <- 1 - alpha
# ##########################################################
#
# t.list        <- list("reject" = ret, "null.value" = mu.0, "alternative" = alternative, "method" = "t.test", "estimate" = pop.var, "data.name" = deparse(substitute(x)), "statistic" = pop.stat, "parameters" = pop.par, "p.value" = p.v, "estimation.method" = est, "sample.size" = length(x), "conf.int" = conf.int)
# class(t.list) <- c("htest", class(t.list))
t.list = list("reject" = ret, "p.value" = p.v)
return(t.list)
}
if(!is.null(y)){
T.x <- numeric(nboot)
n.1 <- length(x)
n.2 <- length(y)
n   <- n.1 + n.2
t.true <- (mean(x) - mean(y)) / (sqrt((var(x)/n.1) + (var(y)/n.2))) # see Toutenburg p. 145
switch(boot.type, # switch between (groupwise) nonparametric and wild bootstrap
npg = { # groupwise nonparametric bootstrap
x.1.boot <- matrix(sample(x, size = n.1*nboot, replace = T), ncol = nboot)
x.2.boot <- matrix(sample(y, size = n.2*nboot, replace = T), ncol = nboot)
x.1.mean <- colMeans(x.1.boot)
x.2.mean <- colMeans(x.2.boot)
x.1.var  <- (colSums(x.1.boot^2) - n.1*x.1.mean^2)/(n.1-1)
x.2.var  <- (colSums(x.2.boot^2) - n.2*x.2.mean^2)/(n.2-1)
T.x      <- (x.1.mean - x.2.mean) / (sqrt((x.1.var / n.1) + (x.2.var / n.2)))
est      <- "Groupwise Nonparametric Bootstrap"
},
np  = { # Nonparametric Bootstrap
x.boot   <- matrix(sample(c(x,y), size = n*nboot, replace = T), ncol = nboot)
x.1.boot <- x.boot[1:n.1, ]
x.2.boot <- x.boot[(n.1+1):n, ]
x.1.mean <- colMeans(x.1.boot)
x.2.mean <- colMeans(x.2.boot)
x.1.var  <- (colSums(x.1.boot^2) - n.1*x.1.mean^2)/(n.1-1)
x.2.var  <- (colSums(x.2.boot^2) - n.2*x.2.mean^2)/(n.2-1)
T.x      <- (x.1.mean - x.2.mean) / (sqrt((x.1.var / n.1) + (x.2.var / n.2)))
est      <- "Nonparametric Bootstrap"
},
wild = { # Wild (Rademacher) Bootstrap
z.1      <- x - mean(x)
z.2      <- y - mean(y)
w.boot   <- matrix(sample(c(-1,1), size = n*nboot, replace = T), ncol = nboot)
x.1.boot <- z.1 * w.boot[1:n.1, ]
x.2.boot <- z.2 * w.boot[(n.1+1):n, ]
x.1.mean <- colMeans(x.1.boot)
x.2.mean <- colMeans(x.2.boot)
x.1.var  <- (colSums(x.1.boot^2) - n.1*x.1.mean^2)/(n.1-1)
x.2.var  <- (colSums(x.2.boot^2) - n.2*x.2.mean^2)/(n.2-1)
T.x      <- (x.1.mean - x.2.mean) / (sqrt((x.1.var / n.1) + (x.2.var / n.2)))
est      <- "Wild Bootstrap"
}
)
crit   <- quantile(T.x, probs = c(alpha/2, alpha, 1-alpha, 1-alpha/2)) # compute critical values for one- and twosided
switch(alternative, # switch between alternative hypotheses and choose whether to reject or not reject
two.sided = {
ret    <- (t.true < crit[1] || t.true > crit[4])
},
greater   = {
ret  <- t.true > crit[3]
},
less      = {
ret  <- t.true < crit[2]
})
# compute p-value
p.v  <- mean(T.x > t.true)
p.v  <- min(p.v, 1 - p.v)
# Prepare Results #######################################
# dat.nam         <- c(deparse(substitute(x.1)), deparse(substitute(x.2)))
# dat.nam.2       <- paste(dat.nam[1], "and", dat.nam[2])
# h.0             <- 0
# names(h.0)      <- "difference in means"
# pop.var         <- c(mean(x.1.mean), mean(x.2.mean))
# names(pop.var)  <- paste("Mean of", dat.nam)
# pop.stat        <- t.true
# names(pop.stat) <- "t"
# pop.par         <- n - 2
# names(pop.par)  <- "df"
# conf.int        <- quantile((x.1.mean - x.2.mean), probs = c(alpha/2, 1-alpha/2))
#
# attr(conf.int, "conf.level") <- 1 - alpha
# ##########################################################
#
# t.list        <- list("reject" = ret ,"null.value" = h.0, "alternative" = alternative, "method" = "Welch Two Sample t-Test", "estimate" = pop.var, "data.name" = dat.nam.2, "statistic" = pop.stat, "parameters" = pop.par, "p.value" = p.v, "estimation.method" = est, "sample.size" = n, "conf.int" = conf.int)
# class(t.list) <- c("htest", class(t.list))
t.list = list("reject" = ret, "p.value" = p.v)
return(t.list)
}
}
t.testBoot.cpp <- function(x, y = NULL, mu.0 = 0, alpha = 0.05, alternative = "two.sided", nboot = 100, boot.type = "np"){
if(is.null(y)){
T.x    <- numeric(nboot)
n      <- length(x)
t.true <- (mean(x) - mu.0) / sqrt(var(x)) * sqrt(n)
switch(boot.type, # switch between nonparametric and wild bootstrap
np = {
T.x <- tBootNp(x, nboot)
est <- "Nonparametric Bootstrap"
},
wild = {
T.x <- tBootW(x, nboot)
est <- "Wild Bootstrap"
}
)
crit   <- quantile(T.x, probs = c(alpha/2, alpha, 1-alpha, 1-alpha/2)) # compute critical values for one- and twosided
switch(alternative, # switch between alternative hypotheses and choose whether to reject or not reject
two.sided = {
ret    <- (t.true < crit[1] || t.true > crit[4])
},
greater   = {
ret  <- t.true > crit[3]
},
less      = {
ret  <- t.true < crit[2]
})
# compute p-value
p.v  <- mean(T.x > t.true)
p.v  <- min(2 * p.v, 2 - 2 * p.v)
# Prepare Results #######################################
# names(mu.0)     <- "mean"
# pop.var         <- mean(x.mean)
# names(pop.var)  <- "Mean"
# pop.stat        <- t.true
# names(pop.stat) <- "t"
# pop.par         <- length(x) - 1
# names(pop.par)  <- "df"
# conf.int        <- quantile(x.mean, probs = c(alpha/2, 1-alpha/2))
# attr(conf.int, "conf.level") <- 1 - alpha
# ##########################################################
#
# t.list        <- list("reject" = ret, "null.value" = mu.0, "alternative" = alternative, "method" = "t.test", "estimate" = pop.var, "data.name" = deparse(substitute(x)), "statistic" = pop.stat, "parameters" = pop.par, "p.value" = p.v, "estimation.method" = est, "sample.size" = length(x), "conf.int" = conf.int)
# class(t.list) <- c("htest", class(t.list))
t.list = list("reject" = ret, "p.value" = p.v)
return(t.list)
}
if(!is.null(y)){
T.x <- numeric(nboot)
n.1 <- length(x)
n.2 <- length(y)
n   <- n.1 + n.2
t.true <- (mean(x) - mean(y)) / (sqrt((var(x)/n.1) + (var(y)/n.2))) # see Toutenburg p. 145
switch(boot.type, # switch between (groupwise) nonparametric and wild bootstrap
npg = { # groupwise nonparametric bootstrap
T.x <- tBoot2Npg(x, y, nboot)
est <- "Groupwise Nonparametric Bootstrap"
},
np  = { # Nonparametric Bootstrap
T.x <- tBoot2Np(x, y, nboot)
est <- "Nonparametric Bootstrap"
},
wild = { # Wild (Rademacher) Bootstrap
T.x <- tBoot2W(x, y, nboot)
est <- "Wild Bootstrap"
}
)
crit   <- quantile(T.x, probs = c(alpha/2, alpha, 1-alpha, 1-alpha/2)) # compute critical values for one- and twosided
switch(alternative, # switch between alternative hypotheses and choose whether to reject or not reject
two.sided = {
ret    <- (t.true < crit[1] || t.true > crit[4])
},
greater   = {
ret  <- t.true > crit[3]
},
less      = {
ret  <- t.true < crit[2]
})
# compute p-value
p.v  <- mean(T.x > t.true)
p.v  <- min(p.v, 1 - p.v)
# Prepare Results #######################################
# dat.nam         <- c(deparse(substitute(x.1)), deparse(substitute(x.2)))
# dat.nam.2       <- paste(dat.nam[1], "and", dat.nam[2])
# h.0             <- 0
# names(h.0)      <- "difference in means"
# pop.var         <- c(mean(x.1.mean), mean(x.2.mean))
# names(pop.var)  <- paste("Mean of", dat.nam)
# pop.stat        <- t.true
# names(pop.stat) <- "t"
# pop.par         <- n - 2
# names(pop.par)  <- "df"
# conf.int        <- quantile((x.1.mean - x.2.mean), probs = c(alpha/2, 1-alpha/2))
#
# attr(conf.int, "conf.level") <- 1 - alpha
# ##########################################################
#
# t.list        <- list("reject" = ret ,"null.value" = h.0, "alternative" = alternative, "method" = "Welch Two Sample t-Test", "estimate" = pop.var, "data.name" = dat.nam.2, "statistic" = pop.stat, "parameters" = pop.par, "p.value" = p.v, "estimation.method" = est, "sample.size" = n, "conf.int" = conf.int)
# class(t.list) <- c("htest", class(t.list))
t.list = list("reject" = ret, "p.value" = p.v)
return(t.list)
}
}
A.temp.r.np = A.temp.r.w = A.temp.c.np = A.temp.c.w = matrix(NA, nrow = 4, ncol = 1000) # X from: Normal, Poisson, Exponential, ChiSquare
time.r = cbind(base_grid, time.r)
time.c = cbind(base_grid, time.c)
for(i in 1:nrow(dat.R)){
A.temp.r.np[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.r.w[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.c.w[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
x.sample = rchisq(n = dat.R$n[i], df = 2)
time.r[i,] = summary(microbenchmark(t.testBoot(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000) # microseconds
time.c[i,] = summary(microbenchmark(t.testBoot.cpp(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000)
}
replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
rpois(n = dat.R$n[i], lambda = 5)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
source("t_test.R") # Bootstrap t-Test
A.temp.r.np = A.temp.r.w = A.temp.c.np = A.temp.c.w = matrix(NA, nrow = 4, ncol = 1000) # X from: Normal, Poisson, Exponential, ChiSquare
time.r = cbind(base_grid, time.r)
time.c = cbind(base_grid, time.c)
for(i in 1:nrow(dat.R)){
A.temp.r.np[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.r.w[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.c.w[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
x.sample = rchisq(n = dat.R$n[i], df = 2)
time.r[i,] = summary(microbenchmark(t.testBoot(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000) # microseconds
time.c[i,] = summary(microbenchmark(t.testBoot.cpp(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000)
}
A.temp.r.np = A.temp.r.w = A.temp.c.np = A.temp.c.w = matrix(NA, nrow = 4, ncol = 1000) # X from: Normal, Poisson, Exponential, ChiSquare
time.r = time.c = matrix(NA, nrow = nrow(dat.R), ncol = 6)
time.r = cbind(base_grid, time.r)
time.c = cbind(base_grid, time.c)
for(i in 1:nrow(dat.R)){
A.temp.r.np[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.r.w[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.c.w[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
x.sample = rchisq(n = dat.R$n[i], df = 2)
time.r[i,] = summary(microbenchmark(t.testBoot(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000) # microseconds
time.c[i,] = summary(microbenchmark(t.testBoot.cpp(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000)
}
### Power Study
### type I Error for two sample t-Test
### Power Study
### type I Error for one sample t-Test
A.temp.r.np = A.temp.r.w = A.temp.c.np = A.temp.c.w = matrix(NA, nrow = 4, ncol = 1000) # X from: Normal, Poisson, Exponential, ChiSquare
time.r = time.c = matrix(NA, nrow = nrow(dat.R), ncol = 6)
for(i in 1:nrow(dat.R)){
A.temp.r.np[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.r.w[1,] = replicate(1000, t.testBoot(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i])$reject)
A.temp.c.w[1,] = replicate(1000, t.testBoot.cpp(rnorm(n = dat.R$n[i]), nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[2,] = replicate(1000, t.testBoot(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[2,] = replicate(1000, t.testBoot.cpp(rpois(n = dat.R$n[i], lambda = 5), mu.0 = 5, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[3,] = replicate(1000, t.testBoot(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[3,] = replicate(1000, t.testBoot.cpp(rexp(n = dat.R$n[i], rate = 3), mu.0 = 1/3, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.r.np[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.r.w[4,] = replicate(1000, t.testBoot(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
A.temp.c.np[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i])$reject)
A.temp.c.w[4,] = replicate(1000, t.testBoot.cpp(rchisq(n = dat.R$n[i], df = 2), mu.0 = 2, nboot = dat.R$nboots[i], boot.type = "wild")$reject)
x.sample = rchisq(n = dat.R$n[i], df = 2)
time.r[i,] = summary(microbenchmark(t.testBoot(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000) # microseconds
time.c[i,] = summary(microbenchmark(t.testBoot.cpp(x.sample, mu.0 = 2, nboot = dat.R$nboots[i]))$time / 1000)
}
time.r = cbind(base_grid, time.r)
time.c = cbind(base_grid, time.c)
time.r
time.c
plot(density(rchisq(1000, 1000)))
plot(density(rchisq(2000, 2000)))
lines(density(rnorm(1000, 1000, sqrt(2000))))
plot(density(rchisq(2000, 2000)))
lines(density(rnorm(1000, 1000, sqrt(2000))), col = "red")
plot(density(rchisq(2000, 2000)), ylim = c(0, 0.2))
lines(density(rnorm(1000, 1000, sqrt(2000))), col = "red")
plot(density(rnorm(1000, 1000, sqrt(2000))), col = "red")
plot(density(rchisq(2000, 2000)))
lines(y = density(rnorm(1000, 1000, sqrt(2000))), col = "red")
lines(x = rnorm(1000, 1000, sqrt(2000), y = density(rnorm(1000, 1000, sqrt(2000))), col = "red")
)
lines(x = rnorm(1000, 1000, sqrt(2000)), y = density(rnorm(1000, 1000, sqrt(2000))), col = "red")
lines(density(rnorm(1000, 1000, sqrt(2000))))
lines(density(rnorm(1000, 1000, sqrt(2000))), col = "red")
plot(density(rchisq(1000, 1000)))
lines(density(rnorm(1000, 1000, sqrt(2000))), col = "red")
rowMeans(A.temp.r.np)
mean(replicate(1000, t.test(rexp(dat.R$n[i], rate = 3), mu = 1/3)$p.value))
?t.test()
cbind(base_grid, NA, NA, NA, NA)
test = cbind(base_grid, NA, NA, NA, NA)
cbind(base_grid, "a" = NA, NA, NA, NA)
time.r
summary(rnorm(10))
names(summary(rnorm(10)))
21
i = 21
ggplot()+
geom_line(mapping = aes(x = time.r[i + c(0:4), "nboots"], y = time.r[i + c(0:4), 3]), color = "red") +
geom_line(mapping = aes(x = time.c[i + c(0:4), "nboots"], y = time.c[i + c(0:4), 3]), color = "blue") +
labs(x = "Bootstrap Iterations", y = "Microseconds") # on Median
mean(replicate(1000, t.testBoot(rnorm(15, 1, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 1, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 2, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 2, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 3, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 3, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 3, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 3, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 4, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.6, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.7, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.8, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.9, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 1.4, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 3), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 4), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 0.2), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 0.5), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.5, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 0.75, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 1, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(15, 1.25, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(5, 1.25, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(5, 1.25, 1), nboot = 1000)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(5, 1.25, 1), nboot = 1000)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(5, 1.25, 1), nboot = 100)$reject))
1 - mean(replicate(1000, t.testBoot(rnorm(5, 1.25, 1), nboot = 10000)$reject))
cbind(base_grid, "R_np" = NA, "R_w" = NA, "C_np" =  NA, "C_w" = NA)
